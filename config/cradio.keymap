/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_windows {
            bindings = <&kp LEFT_GUI>;
            key-positions = <22 23>;
            timeout-ms = <100>;
            require-prior-idle-ms = <200>;
        };

        ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <20 21>;
            timeout-ms = <100>;
            require-prior-idle-ms = <200>;
        };

        tabcombo {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            timeout-ms = <100>;
            require-prior-idle-ms = <200>;
        };

        esccombo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <100>;
            require-prior-idle-ms = <200>;
        };
    };

    behaviors {
        double_tap_esc: double_tap_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_TAP_ESC";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESCAPE>;

            tapping-term-ms = <180>;
        };

        doubletap_tab: doubletap_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLETAP_TAB";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp TAB>;

            tapping-term-ms = <180>;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q              &kp W  &kp E  &kp R  &kp T                   &kp Y        &kp U                    &kp I      &kp O    &kp P
&kp A              &kp S  &kp D  &kp F  &kp G                   &kp H        &kp J                    &kp K      &kp L    &kp SEMICOLON
&hold_tap LCTRL Z  &kp X  &kp C  &kp V  &kp B                   &kp N        &kp M                    &kp COMMA  &kp DOT  &kp SLASH
                                 &mo 1  &mt LEFT_SHIFT SPACE    &lt 2 ENTER  &mt RIGHT_ALT BACKSPACE
            >;
        };

        left_layer {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5            &kp NUMBER_6      &kp N7             &kp N8                &kp N9                 &kp N0
&none         &none         &none         &none         &none             &kp MINUS         &kp EQUAL          &kp NON_US_BACKSLASH  &kp TILDE              &kp SQT
&kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &none             &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DEL
                                          &mo 1         &kp LEFT_SHIFT    &kp RGUI          &mo 2
            >;
        };

        right_layer {
            bindings = <
&none  &none     &kp UP_ARROW  &none      &none    &kp F1  &kp F2          &kp F3   &kp F4   &bt BT_CLR
&none  &kp LEFT  &kp DOWN      &kp RIGHT  &none    &kp F5  &kp F6          &kp F7   &kp F8   &bt BT_NXT
&none  &none     &none         &none      &none    &kp F9  &kp F10         &kp F11  &kp F12  &bt BT_PRV
                               &none      &mo 3    &none   &bt BT_CLR_ALL
            >;
        };

        tri_layer {
            bindings = <
&none  &none  &mkp MB1  &mkp MB2  &mkp MB3    &none  &none           &mmv MOVE_UP    &none            &msc SCRL_UP
&none  &none  &none     &none     &none       &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN
&none  &none  &none     &none     &none       &none  &none           &none           &none            &none
                        &none     &none       &none  &none
            >;
        };
    };
};
